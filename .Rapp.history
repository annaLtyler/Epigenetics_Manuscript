weight[m.locale,"weight_final"]
hist_with_points(weight[m.locale,"weight_final"], breaks = 100)
sex.order <- order(covar[,"Sex"])
library(igraph)
cols <- categorical_pal(8)
sex.col <- rep(cols[2], nrow(covar))
sex.col[m.locale] <- cols[3]
hist_with_points(weight[sex.order,"weight_final"], breaks = 100, cols = sex.col[sex.order])
hist_with_points(weight[sex.order,"weight_final"], breaks = 100, col = sex.col[sex.order])
weight[sex.order,"weight_final"]
sex.col[sex.order]
plot(weight[sex.order,"weight_final"], breaks = 100, col = sex.col[sex.order])
warnings()
hist_with_points(weight[sex.order,"weight_final"], breaks = 100, col = sex.col[sex.order])
hist_with_points(weight[sex.order,"weight_final"], breaks = 100, col = sex.col[sex.order], xlab = "Weight")
dev.off()
hist_with_points(weight[sex.order,"weight_final"], breaks = 100, col = sex.col[sex.order], xlab = "Weight")
pdf("~/Desktop/weight.pdf", height = 6, width = 5)#
hist_with_points(weight[sex.order,"weight_final"], breaks = 100, col = sex.col[sex.order], xlab = "Weight")#
dev.off()
pdf("~/Desktop/weight.pdf", height = 6, width = 5)#
hist_with_points(weight[sex.order,"weight_final"], breaks = 100, col = sex.col[sex.order], xlab = "Weight",#
	main = "")#
dev.off()
pdf("~/Desktop/weight.pdf", height = 6, width = 5)#
hist_with_points(weight[sex.order,"weight_final"], breaks = 100, col = sex.col[sex.order], xlab = "Weight (g)",#
	main = "")#
dev.off()
weight.col <- paste("weight", 5:24, sep = "_")
weight <- clin.data$data[,weight.col]#
#take out outliers that are obviously mistakes#
weight[which(weight > 100)] <- NA #
weight[which(weight < 10)] <- NA
c(min(weight), max(weight))
c(min(weight, na.rm = TRUE), max(weight, na.rm = TRUE))
plot.new()#
plot.window(xlim = c(0, ncol(weight)), ylim = c(min(weight, na.rm = TRUE), max(weight, na.rm = TRUE)))#
for(i in 1:nrow(weight)){#
	points(1:ncol(weight), weight[i,], col = sex.col[i])#
}
pdf("~/Desktop/weight_trajectory.pdf")#
plot.new()#
plot.window(xlim = c(0, ncol(weight)), ylim = c(min(weight, na.rm = TRUE), max(weight, na.rm = TRUE)))#
for(i in 1:nrow(weight)){#
	points(1:ncol(weight), weight[i,], col = sex.col[i], type = "l")#
}#
dev.off()
pdf("~/Desktop/weight_trajectory.pdf")#
plot.new()#
plot.window(xlim = c(0, ncol(weight)), ylim = c(min(weight, na.rm = TRUE), max(weight, na.rm = TRUE)))#
for(i in 1:nrow(weight)){#
	points(1:ncol(weight), weight[i,], col = sex.col[i], type = "l")#
}#
axis(1);axis(2)#
mtext("Weight (g)", side = 2, line = 2.5)#
dev.off()
plot.new()#
plot.window(xlim = c(5, 25), ylim = c(min(weight, na.rm = TRUE), max(weight, na.rm = TRUE)))#
for(i in 1:nrow(weight)){#
	points(5:25, weight[i,], col = sex.col[i], type = "l")#
}
ncol(weight)
length(5:25)
pdf("~/Desktop/weight_trajectory.pdf")#
plot.new()#
plot.window(xlim = c(5, 24), ylim = c(min(weight, na.rm = TRUE), max(weight, na.rm = TRUE)))#
for(i in 1:nrow(weight)){#
	points(5:25, weight[i,], col = sex.col[i], type = "l")#
}#
axis(1);axis(2)#
mtext("Weight (g)", side = 2, line = 2.5)#
dev.off()
pdf("~/Desktop/weight_trajectory.pdf")#
plot.new()#
plot.window(xlim = c(5, 24), ylim = c(min(weight, na.rm = TRUE), max(weight, na.rm = TRUE)))#
for(i in 1:nrow(weight)){#
	points(5:24, weight[i,], col = sex.col[i], type = "l")#
}#
axis(1);axis(2)#
mtext("Weight (g)", side = 2, line = 2.5)#
dev.off()
max(weight, na.rm = TRUE)
pdf("~/Desktop/weight_trajectory.pdf")#
plot.new()#
plot.window(xlim = c(5, 25), ylim = c(min(weight, na.rm = TRUE), max(weight, na.rm = TRUE)))#
for(i in 1:nrow(weight)){#
	points(5:24, weight[i,], col = sex.col[i], type = "l")#
}#
axis(1);axis(2)#
mtext("Weight (g)", side = 2, line = 2.5)#
dev.off()
weight[,"weight_15"]
prop.weight.change <- weight[,"weight_15"]/weight[,"weight_final"]
colnames(weight)
weight.col <- c(paste("weight", 5:24, sep = "_"), "weight_final")#
weight <- clin.data$data[,weight.col]#
#take out outliers that are obviously mistakes#
weight[which(weight > 100)] <- NA #
weight[which(weight < 10)] <- NA
imp.weight <- bnstruct::knn.impute(weight)
pdf("~/Desktop/weight_trajectory.pdf")#
plot.new()#
plot.window(xlim = c(5, 25), ylim = c(min(weight, na.rm = TRUE), max(weight, na.rm = TRUE)))#
for(i in 1:nrow(weight)){#
	points(5:24, weight[i,], col = sex.col[i], type = "l")#
}#
axis(1);axis(2)#
mtext("Weight (g)", side = 2, line = 2.5)#
dev.off()
pdf("~/Desktop/weight_trajectory.pdf")#
plot.new()#
plot.window(xlim = c(5, 25), ylim = c(min(weight, na.rm = TRUE), max(weight, na.rm = TRUE)))#
for(i in 1:nrow(weight)){#
	points(5:25, weight[i,], col = sex.col[i], type = "l")#
}#
axis(1);axis(2)#
mtext("Weight (g)", side = 2, line = 2.5)#
dev.off()
prop.weight.change <- weight[,"weight_15"]/weight[,"weight_final"]
hist(prop.weight.change)
prop.weight.change <- weight[,"weight_15"]/weight[,"weight_24"]
hist(prop.weight.change)
prop.weight.change <- weight[,"weight_24"]/weight[,"weight_15"]
hist(prop.weight.change)
prop.weight.change <- weight[,"weight_final"]/weight[,"weight_15"]
hist(prop.weight.change)
prop.weight.change <- weight[,"weight_final"]/weight[,"weight_20"]
hist(prop.weight.change)
pdf("~/Desktop/weight_trajectory.pdf")#
plot.new()#
plot.window(xlim = c(5, 25), ylim = c(min(weight, na.rm = TRUE), max(weight, na.rm = TRUE)))#
for(i in 1:nrow(weight)){#
	points(5:25, weight[i,], col = sex.col[i], type = "l")#
}#
axis(1);axis(2)#
mtext("Weight (g)", side = 2, line = 2.5)#
mtext("Weeks", side = 1, line = 2.5)#
dev.off()
pdf("~/Desktop/weight_trajectory.pdf")#
plot.new()#
plot.window(xlim = c(5, 24), ylim = c(min(weight, na.rm = TRUE), max(weight, na.rm = TRUE)))#
for(i in 1:nrow(weight)){#
	points(5:25, weight[i,], col = sex.col[i], type = "l")#
}#
axis(1);axis(2)#
mtext("Weight (g)", side = 2, line = 2.5)#
mtext("Weeks", side = 1, line = 2.5)#
dev.off()
pdf("~/Desktop/weight_trajectory.pdf")#
plot.new()#
plot.window(xlim = c(5, 25), ylim = c(min(weight, na.rm = TRUE), max(weight, na.rm = TRUE)))#
for(i in 1:nrow(weight)){#
	points(5:25, weight[i,], col = sex.col[i], type = "l")#
}#
axis(1);axis(2)#
mtext("Weight (g)", side = 2, line = 2.5)#
mtext("Weeks", side = 1, line = 2.5)#
dev.off()
pdf("~/Desktop/weight_trajectory_sep.pdf", width = 8, height = 4)#
par(mfrow = c(1,2))#
plot.new()#
plot.window(xlim = c(5, 25), ylim = c(min(weight, na.rm = TRUE), max(weight, na.rm = TRUE)))#
for(f in f.locale){#
	points(5:25, weight[f,], col = cols[2], type = "l")#
}#
axis(1);axis(2)#
mtext("Weight (g)", side = 2, line = 2.5)#
mtext("Weeks", side = 1, line = 2.5)#
#
plot.new()#
plot.window(xlim = c(5, 25), ylim = c(min(weight, na.rm = TRUE), max(weight, na.rm = TRUE)))#
for(f in m.locale){#
	points(5:25, weight[f,], col = cols[3], type = "l")#
}#
axis(1);axis(2)#
mtext("Weight (g)", side = 2, line = 2.5)#
mtext("Weeks", side = 1, line = 2.5)#
#
dev.off()
pdf("~/Desktop/weight_trajectory_sep.pdf", width = 8, height = 4)#
par(mfrow = c(1,2))#
plot.new()#
plot.window(xlim = c(5, 25), ylim = c(min(weight, na.rm = TRUE), max(weight, na.rm = TRUE)))#
for(f in f.locale){#
	points(5:25, weight[f,], col = cols[2], type = "l")#
}#
axis(1);axis(2)#
mtext("Weight (g)", side = 2, line = 2.5)#
mtext("Weeks", side = 1, line = 2.5)#
#
plot.new()#
plot.window(xlim = c(5, 25), ylim = c(min(weight, na.rm = TRUE), max(weight, na.rm = TRUE)))#
for(f in m.locale){#
	points(5:25, weight[m,], col = cols[3], type = "l")#
}#
axis(1);axis(2)#
mtext("Weight (g)", side = 2, line = 2.5)#
mtext("Weeks", side = 1, line = 2.5)#
#
dev.off()
pdf("~/Desktop/weight_trajectory_sep.pdf", width = 8, height = 4)#
par(mfrow = c(1,2))#
plot.new()#
plot.window(xlim = c(5, 25), ylim = c(min(weight, na.rm = TRUE), max(weight, na.rm = TRUE)))#
for(f in f.locale){#
	points(5:25, weight[f,], col = cols[2], type = "l")#
}#
axis(1);axis(2)#
mtext("Weight (g)", side = 2, line = 2.5)#
mtext("Weeks", side = 1, line = 2.5)#
#
plot.new()#
plot.window(xlim = c(5, 25), ylim = c(min(weight, na.rm = TRUE), max(weight, na.rm = TRUE)))#
for(m in m.locale){#
	points(5:25, weight[m,], col = cols[3], type = "l")#
}#
axis(1);axis(2)#
mtext("Weight (g)", side = 2, line = 2.5)#
mtext("Weeks", side = 1, line = 2.5)#
#
dev.off()
hist_with_points(weight[sex.order,"weight_final"], breaks = 100, col = sex.col[sex.order], xlab = "Weight (g)",
legend("topright", legend = c("Female", "Male"), col = cols[2:3], pch = 16)
dev.off()
hist_with_points(weight[sex.order,"weight_final"], breaks = 100, col = sex.col[sex.order], xlab = "Weight (g)",
main = "")
legend("topright", legend = c("Female", "Male"), col = cols[2:3], pch = 16)
pdf("~/Desktop/weight.pdf", height = 6, width = 5)#
hist_with_points(weight[sex.order,"weight_final"], breaks = 100, col = sex.col[sex.order], xlab = "Weight (g)",main = "")#
legend("topright", legend = c("Female", "Male"), col = cols[2:3], pch = 16)#
dev.off()
head(clin.data)
head(clin.data$data)
str(clin.data)
str(clin.data$annot.phenotype)
head(clin.data$annot.phenotype)
clin.data$annot.phenotype
head(clin.data$annot.phenotype)
head(clin.data$annot.phenotype[,1:4])
clin.data$annot.phenotype[,1:4]
write.csv(clin.data$annot.phenotype[,1:4], "~/Desktop/clin_annot.csv", quote = FALSE)
max(weight)
max(weight, na.rm = TRUE)
max(weight, na.rm = TRUE)/min(weight, na.rm = TRUE)
c(log10(max(weight, na.rm = TRUE), min(weight, na.rm = TRUE))
)
log10(c(max(weight, na.rm = TRUE), min(weight, na.rm = TRUE))
)
library(RGCCA)
citation(RGCCA)
citation("RGCCA")
??rgcca
install vctrs install.packages("vctrs")
install.packages("vctrs")
install.packages("readr")
install.packages("pins")
vignette("pins")
library(qtl2)
?scan1
library(qtl2)
?scan1
?chisq.test
?runif
?install.packages
install.packages(""~/Downloads/vqtl_2.0.5.tar.gz")
install.packages("~/Downloads/vqtl_2.0.5.tar.gz")
library(qtl2)
?scan1
library(RColorBrewer)
??brewer
display.brewer.all()
url <- "http://innovebioinfo.com/Annotation/Polytracts/trackHub/mm10/polytract_mm10.bb"
destfile <- "~/Desktop/polytract_mm10.bb"
download.file(url, destfile)
library(umap)
?umap
??tsne
??umap.config
??config
test <- umap.config
test <- umap.config()
test <- umap.defaults()
umap.defaults
library(Rdimtools)
install.packages(Rdimtools)
install.packages("Rdimtools")
library(Rdmimtools)
install.packages("gmp")
install.packages("~/Downloads/gmp_0.6-9.tar.gz")
library(umap)
?config
??config
library(fastICA)
?fastICA
??isomap
install.packages("vegan")
op <- par(mar=c(4,4,1,1)+0.2, mfrow=c(2,2))#
data(BCI)
library(vegan)
op <- par(mar=c(4,4,1,1)+0.2, mfrow=c(2,2))#
data(BCI)
dis <- vegdist(BCI)
dis
tr <- spantree(dis)
pl <- ordiplot(cmdscale(dis), main="cmdscale")
lines(tr, pl, col="red")
op <- par(mar=c(4,4,1,1)+0.2, mfrow=c(2,2))#
data(BCI)#
dis <- vegdist(BCI)#
tr <- spantree(dis)#
pl <- ordiplot(cmdscale(dis), main="cmdscale")#
lines(tr, pl, col="red")#
ord <- isomap(dis, k=3)#
ord#
pl <- plot(ord, main="isomap k=3")#
lines(tr, pl, col="red")#
pl <- plot(isomap(dis, k=5), main="isomap k=5")#
lines(tr, pl, col="red")#
pl <- plot(isomap(dis, epsilon=0.45), main="isomap epsilon=0.45")#
lines(tr, pl, col="red")#
par(op)#
## colour points and web by the dominant species#
dom <- apply(BCI, 1, which.max)#
## need nine colours, but default palette  has only eight#
op <- palette(c(palette("default"), "sienna"))#
plot(ord, pch = 16, col = dom, n.col = dom) #
palette(op)
op <- par(mar=c(4,4,1,1)+0.2, mfrow=c(2,2))#
data(BCI)#
dis <- vegdist(BCI)#
tr <- spantree(dis)#
pl <- ordiplot(cmdscale(dis), main="cmdscale")#
lines(tr, pl, col="red")#
ord <- isomap(dis, k=3)#
ord#
pl <- plot(ord, main="isomap k=3")#
lines(tr, pl, col="red")#
pl <- plot(isomap(dis, k=5), main="isomap k=5")#
lines(tr, pl, col="red")#
pl <- plot(isomap(dis, epsilon=0.45), main="isomap epsilon=0.45")#
lines(tr, pl, col="red")#
par(op)#
## colour points and web by the dominant species#
dom <- apply(BCI, 1, which.max)#
## need nine colours, but default palette  has only ei
install.packages("Rdimtools")
library(Rdimtools)
install.packages("Rcdsp")
install.packages("Rcsdp")
library(Rdimtools)
install.packages("ANN2")
test <- function(n,y=gtools::permutations(n,n))y[!colSums(t(y)==1:n),]
test(8)
library(parallel)
library(doParallel)
?foreach
?makeCluster
times(3) %do% rnorm(1)
d <- data.frame(x=1:10, y=rnorm(10))
s <- foreach(d=iter(d, by='row'), .combine=rbind) %dopar% d#
identical(s, d)
d <- data.frame(x=1:10, y=rnorm(10))
s <- foreach(d=iter(d, by='row'), .combine=rbind) %dopar% d#
identical(s, d)
s
stopCluster(cl)
?mcapply
??mcapply
?parLapply
?next
??saveWidget
library(htmlwidgets)
?saveWidget
library(plotly)
?plot_ly
library(qtl2)
?scan1
?lm
library(devtools)#
install_github("mjcstats", "drmjc")
library(qtl2)
?find_peaks
library(pheatmap)
?pheatmap
?dendrogram
?barplot
library(qtl2)
page(scan1)
page(get_common_ids)
test <- readRDS("~/Documents/Projects/Epigenetics/Epigenetics_Manuscript/Results/ChromHMM/14_states_C/Chromatin_State_DO_Coef.RDS")
str(test)
length(library(lme4))
length(test)
str(test[[1]])
head(test[[1]])
test2 <- readRDS("~/Documents/Projects/Epigenetics/Epigenetics_Manuscript/Results/ChromHMM/14_states_C/chQTL.state.coef.RDS")
str(test2)
?t.test
?kruskal.test
?chisq.test
?runif
?ks.test
?lm
?t.test
test <- readRDS("~/Documents/Projects/Epigenetics/Epigenetics_Manuscript/Results/ChromHMM/14_states_C/Chromatin.Matrices.Scaled.RDS")
str(test[[1]])
test <- readRDS("~/Documents/Projects/Epigenetics/Epigenetics_Manuscript/Results/ChromHMM/14_states_C/Chromatin.States.Gene.Coords.RDS")
str(test[[1]])
test <- readRDS("~/Documents/Projects/Epigenetics/Epigenetics_Manuscript/Results/RRBS/RRBS.presence.Expr.Cor.Across.Strains.RDS")
str(test)
library(pheatmap)
?pheatmap
?order
library(data.table)
?foverlaps
install.packages(data.table)
remove.packages("data.table")
install.packages("data.table", type = "source",#
    repos = "https://Rdatatable.gitlab.io/data.table")
library(data.table)
x = data.table(start=c(5,31,22,16), end=c(8,50,25,18), val2 = 7:10)#
y = data.table(start=c(10, 20, 30), end=c(15, 35, 45), val1 = 1:3)
setkey(y, start, end)
y
x
foverlaps(x, y, type="any", which=TRUE) ## return overlap indices
foverlaps(x, y, type="any") ## return overlap joi
foverlaps(x, y, type="any", mult="first")
?grid
?t.test
?integrate
setwd("~/Documents/Projects/Epigenetics/Epigenetics_Manuscript")
library(here)
reg.dir <- here("Data", "regulatory_annot")#
reg.bed <- read.table(file.path(oreganno.dir, "liver_chrom.bed"), header = FALSE,#
stringsAsFactors = FALSE)
reg.bed <- read.table(file.path(reg.dir, "liver_chrom.bed"), header = FALSE,#
stringsAsFactors = FALSE)
head(reg.bed)
u_chrom <- unique(reg.bed[,4])
length(u_chrom)
chrom.bed <- lapply(u_chrom, function(reg.bed[which(reg.bed[,4] == x)]))
chrom.bed <- lapply(u_chrom, function(reg.bed[which(reg.bed[,4] == x),]))
chrom.bed <- lapply(u_chrom, function(x) reg.bed[which(reg.bed[,4] == x),])
str(chrom.bed)
i = 1
filename <- file.path(reg.dir, paste0("Liver", u_chrom[i], ".bed"))
filename
filename <- file.path(reg.dir, paste0("Liver_", u_chrom[i], ".bed"))
filename
for(i in 1:length(chrom.bed)){#
    filename <- file.path(reg.dir, paste0("Liver_", u_chrom[i], ".bed"))#
    write.table(chrom.bed[[i]], filename, quote = FALSE, sep = "\t",#
    row.names = FALSE, col.names = FALSE)#
}
paste("gzip", file.path(reg.dir, "TFbs.bed"))
filename
compress.line <- paste("gzip", filename)
system(compress.line)
move.line <- paste("mv", paste0(filename, ".gz"), here("Data", "mm10"))
move.line
system(move.line)
for(i in 1:length(chrom.bed)){#
    filename <- file.path(reg.dir, paste0("Liver_", u_chrom[i], ".bed"))#
    write.table(chrom.bed[[i]], filename, quote = FALSE, sep = "\t",#
    row.names = FALSE, col.names = FALSE)#
#
    compress.line <- paste("gzip", filename)#
    system(compress.line)#
#
    move.line <- paste("mv", paste0(filename, ".gz"), here("Data", "mm10"))#
    system(move.line)#
#
}
orig.file <- file.path(reg.dir, "liver_chrom.bed")
compress.line <- paste("gzip", orig.file)
system(compress.line)
move.line <- paste("mv", paste0(orig.file, ".gz"), here("Data", "mm10"))
system(move.line)
