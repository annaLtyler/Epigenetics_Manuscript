install.packages("RColorBrewer")
library("gmm")
install.packages("gmm")
library("gmm")
library(cape)
q()
library(gmm)
install.packages("gmm")
library(gmm)
.libPaths()
library(gmm)
.Library
sessionInfo()
library(gmm)
Sys.getenv("LD_LIBRARY_PATH")
library(gmm)
library(devtools)
"install_github
install_github
?install.github
??install.github
plot.dendrogram
?plot.dendrogram
?pheatmap
library(pheatmap)
?pheatmap
library(rgl)
plot3d
library(GOsummaries)
?gosummaries
library(wordcloud)
?wordcloud
?colorRamp
library(RColorBrewer)
pal <- colorRampPalette(rev(RColorBrewer::brewer.pal(n = 7, name = "RdYlBu")))(100)
pal
colorRampPalette(rev(RColorBrewer::brewer.pal(n = 7, name = "RdYlBu")))
test <- colorRampPalette(rev(RColorBrewer::brewer.pal(n = 7, name = "RdYlBu")))
test
cols <- test(10)
barplot(rep(1, 10), cols)
barplot(rep(1, 10), col = cols)
rev(RColorBrewer::brewer.pal(n = 7, name = "RdYlBu"))
col.fun <- colorRampPalette(c("white", "red"))
cols <- col.fun(10)
barplot(rep(1, 10), col = cols)
n = 100#
cols <- col.fun(n)#
barplot(rep(1, n), col = cols)
??make.cluster
?makeCluster
??makeCluster
a <- sink(NULL)
a
sink("test.txt")
a <- sink(NULL)
a
sink("test.txt")
print("This is a test")
a <- sink(NULL)
a
print("This is a test")
a <- sink("test.txt")
a
print("This is a test")
a <- sink(NULL)
a
sink.number()
?merge
?boxplot
?which.max
a <- c(1:10, NA, 12:15)
which.max(a)
which.min(a)
?qtl2
library(qtl2)
?scan1perm
library(wordcloud)
library(wordcloud2)
?wordcloud
wordcloud(
"Many years ago the great British explorer George Mallory, who #
was to die on Mount Everest, was asked why did he want to climb #
it. He said, \"Because it is there.\"#
#
Well, space is there, and we're going to climb it, and the #
moon and the planets are there, and new hopes for knowledge #
and peace are there. And, therefore, as we set sail we ask #
God's blessing on the most hazardous and dangerous and greatest #
adventure on which man has ever embarked.",#
	,random.order=FALSE)
?tm_map.SimpleCorpus
library(easyPubMed)
?fecth_pubmed_data
??fetch_pubmed_data
?removePunctuation
?removeWords
?stopwords
stopwords("en")
stopwords(kind = "English")
?standard
?stopwords
library(tm)
?stopwords
stopwords(en)
test <- stopwords("en")
test
?wordcloud
?match
custom_grep
?custom_grep
?tm_map
?removePunctuation
?removeWords
library(gprofiler)
library(gprofiler2)
?gprofiler
??gprofile
??gconvert
??gortho
library(biomaRt)
mus <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "mmusculus_gene_ensembl")
att <- listAttributes(mus)
head(att)
att
homolog.idx <- grep("homolog", att[,1])
length(homolog.idx)
setdiff(homolog.idx, 1:nrow(att))
to.keep <- setdiff(1:nrow(att), homolog.idx)
att[to.keep,]
head(att)
uniqe(att[,3])
unique(att[,3])
att[which(att[,3] == "feature_page")]
att[which(att[,3] == "feature_page"),]
library(cape)
cross <-readRDS('~/Documents/Projects/Islets/CAPE_transcripts/Results/cross.RData')
names(cross)
vnames <- rownames(cross$full_net)
vnames
vnames <- colnames(cross$geno_for_pairscan)
vnames
vnames <- gsub("_B", "", colnames(cross$geno_for_pairscan))
vnames
test <- getBM(attributes = "external_gene_name", filters = c("description", "gene_biotype", "chembl"), values = vnames, mart = mus)
test <- getBM(filters = "external_gene_name", attributes = c("description", "gene_biotype", "chembl"), values = vnames, mart = mus)
head(test)
test <- getBM(filters = "external_gene_name", attributes = c("external_gene_name", "description", "gene_biotype", "chembl"), values = vnames, mart = mus)
head(test)
test
library(pheatmap)
?pheatmap
library(igraph)
?igraph::layout
?strsplit
tpm <- as.matrix(read.csv("~/Documents/Data/Epigenetics/DOQTL/DO478_tpm_20360_cis_allele_coef.csv", stringsAsFactors = FALSE))
head(tpm)
just.coef <- tpm[,LETTERS[1:8]]
head(just.coef)
num.coef <- apply(just.coef, 2, as.numeric)
head(num.coef)
write.table(num.coef, "~/Desktop/glue_testing/coef.csv", sep = ",", row.names = FALSE, col.names = FALSE)
for(i in 1:ncol(num.coef)){write.table(num.coef[,i], paste0("~/Desktop/glue_testing/coef", i, ".csv"))}
for(i in 1:ncol(num.coef)){write.table(num.coef[,i], paste0("~/Desktop/glue_testing/coef", i, ".csv"), col.names = FALSE, row.names = FALSE, sep = ",")}
write.table(as.numeric(tpm[,"Gene.Chromosome"]), paste0("~/Desktop/glue_testing/chr", i, ".csv"), col.names = FALSE, row.names = FALSE, sep = ",")
write.table(tpm[,"Gene.Chromosome"], paste0("~/Desktop/glue_testing/chr", i, ".csv"), col.names = FALSE, row.names = FALSE, sep = ",")
write.table(as.numeric(tpm[,"Gene.Start"]), paste0("~/Desktop/glue_testing/chr", i, ".csv"), col.names = FALSE, row.names = FALSE, sep = ",")
write.table(as.numeric(tpm[,"Gene.Start.Mbp"]), paste0("~/Desktop/glue_testing/chr", i, ".csv"), col.names = FALSE, row.names = FALSE, sep = ",")
write.table(as.numeric(tpm[,"Gene.Start.Mbp"]), paste0("~/Desktop/glue_testing/gene_pos", i, ".csv"), col.names = FALSE, row.names = FALSE, sep = ",")
write.table(tpm[,"Gene.Chromosome"], paste0("~/Desktop/glue_testing/chr", i, ".csv"), col.names = FALSE, row.names = FALSE, sep = ",")
write.table(tpm[,"Max.Lod"], paste0("~/Desktop/glue_testing/lod", i, ".csv"), col.names = FALSE, row.names = FALSE, sep = ",")
write.table(tpm[,"Max.LOD"], paste0("~/Desktop/glue_testing/lod", i, ".csv"), col.names = FALSE, row.names = FALSE, sep = ",")
write.table(tpm[,"Gene.Symbol"], paste0("~/Desktop/glue_testing/gene.csv"), col.names = FALSE, row.names = FALSE, sep = ",")
which(colnames(tpm) %in% LETTERS)
for(i in 1:ncol(tpm)){
write.table(tpm[,i,drop=FALSE], paste0("~/Desktop/glue_testing/", colnames(tpm)[i], "csv"), quote = FALSE)
}
head(tpm)
for(i in 2:ncol(tpm)){#
	write.table(tpm[,i,drop=FALSE], paste0("~/Desktop/glue_testing/", colnames(tpm)[i], ".csv"), quote = FALSE)#
}
for(i in 2:ncol(tpm)){#
	write.table(tpm[,i,drop=FALSE], paste0("~/Desktop/glue_testing/", colnames(tpm)[i], ".csv"), quote = FALSE, row.names = FALSE)#
}
library(devtools)
check('~/Documents/git_repositories/cape')
library(cape)
test <- readRDS('~/Documents/Data/DO/data_for_cape/capeDO_2018_05_24.RData')
str(test)
library(biomaRt)
?useEnsembl
library(GO.db)
?getOntology
??getOntology(ll1, "BP")
??getOntology
?GO.db
ls("package:GO.db")
library("GOexpress")
BiocManager::install("GOexpress")
library("GOSim")
BiocManager::install("GOSim")
library(GOSim)
?getGOInfo
??GOSim
??org.Mm.eg.db
BiocManager::install("org.Mm.eg.db")
?gomap
??gomap
?setEvidenceLevel
?gconvert
??gconvert
?getGOInfo
?calcIC
??calcIC
?grep
??GOsim
?getTermSim
??getTermSim
?setEvidenceLevel
??setEvidenceLevel
?calcICs
??calcICs
??setOntology
library(igraph)
??plot.igraph
library(qtl2)
?scan1
test <- matrix(1:100, 10, 10)
class(test)
library(wordcloud)
?wordcloud
?boxplot
4^2
>install.packages
?install.packages
library(containerit)
setwd("~/Documents/Projects/Epigenetics/Epigenetics_Manuscript/")
list.files()
setwd("Documents/")
ls
list.files()
setwd("1.Setup/")
list.files()
doc.obj <- dockerfile(from = "1.ChromHMM.Rmd", silent = TRUE, cmd = CMD_Render("1.ChromHMM.Rmd"))
.Last.error.trace
doc.obj <- dockerfile(from = "1.ChromHMM.Rmd", silent = TRUE, cmd = CMD_Render("1.ChromHMM.Rmd"))
.Last.error.trace
.Last.error.trace
doc.obj <- dockerfile(from = "1.ChromHMM.Rmd", silent = TRUE, cmd = CMD_Render("1.ChromHMM.Rmd"))
.Last.error.trace
